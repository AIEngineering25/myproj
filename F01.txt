package com.utils;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class ScreenshotUtils {
    
    public static String captureScreenshot(WebDriver driver, String testName) {
        try {
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"));
            String screenshotName = testName + "_" + timestamp + ".png";
            String screenshotPath = System.getProperty("user.dir") + "/target/screenshots/" + screenshotName;
            
            // Create screenshots directory if it doesn't exist
            File screenshotDir = new File(System.getProperty("user.dir") + "/target/screenshots/");
            if (!screenshotDir.exists()) {
                screenshotDir.mkdirs();
            }
            
            TakesScreenshot takesScreenshot = (TakesScreenshot) driver;
            File sourceFile = takesScreenshot.getScreenshotAs(OutputType.FILE);
            File destFile = new File(screenshotPath);
            
            FileUtils.copyFile(sourceFile, destFile);
            
            // Return relative path for HTML report
            return "./screenshots/" + screenshotName;
        } catch (Exception e) {
            System.err.println("Failed to capture screenshot: " + e.getMessage());
            return null;
        }
    }
}
package com.utils;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.File;

public class ExtentReportManager {
    private static ExtentReports extent;
    private static ThreadLocal<ExtentTest> test = new ThreadLocal<>();
    
    public static void initializeReport() {
        if (extent == null) {
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"));
            String reportPath = System.getProperty("user.dir") + "/target/reports/ExtentReport_" + timestamp + ".html";
            
            // Create reports directory if it doesn't exist
            File reportDir = new File(System.getProperty("user.dir") + "/target/reports/");
            if (!reportDir.exists()) {
                reportDir.mkdirs();
            }
            
            ExtentSparkReporter sparkReporter = new ExtentSparkReporter(reportPath);
            
            // Configure the report
            sparkReporter.config().setDocumentTitle("MagicBricks Automation Test Report");
            sparkReporter.config().setReportName("Test Execution Report");
            sparkReporter.config().setTheme(Theme.STANDARD);
            sparkReporter.config().setTimeStampFormat("dd/MM/yyyy hh:mm:ss");
            
            extent = new ExtentReports();
            extent.attachReporter(sparkReporter);
            
            // System information
            extent.setSystemInfo("Operating System", System.getProperty("os.name"));
            extent.setSystemInfo("Java Version", System.getProperty("java.version"));
            extent.setSystemInfo("Browser", "Chrome");
            extent.setSystemInfo("Environment", "QA");
            extent.setSystemInfo("Tester", "Automation Team");
            
            System.out.println("ExtentReport will be generated at: " + reportPath);
        }
    }
    
    public static void createTest(String testName, String description) {
        ExtentTest extentTest = extent.createTest(testName, description);
        test.set(extentTest);
    }
    
    public static ExtentTest getTest() {
        return test.get();
    }
    
    public static void flushReport() {
        if (extent != null) {
            extent.flush();
        }
    }
    
    public static void endTest() {
        test.remove();
    }
}

package com.listeners;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.setup.BaseSteps;
import com.utils.ExtentReportManager;
import com.utils.ScreenshotUtils;
import org.testng.ITestListener;
import org.testng.ITestResult;
import org.testng.ITestContext;

public class ExtentTestListener implements ITestListener {
    
    @Override
    public void onStart(ITestContext context) {
        ExtentReportManager.initializeReport();
        System.out.println("=== Test Suite Started: " + context.getName() + " ===");
    }
    
    @Override
    public void onTestStart(ITestResult result) {
        String testName = result.getMethod().getMethodName();
        String description = result.getMethod().getDescription();
        
        ExtentReportManager.createTest(testName, description != null ? description : "No description provided");
        ExtentReportManager.getTest().log(Status.INFO, "Test Started: " + testName);
        
        System.out.println("Started Test: " + testName);
    }
    
    @Override
    public void onTestSuccess(ITestResult result) {
        String testName = result.getMethod().getMethodName();
        
        ExtentReportManager.getTest().log(Status.PASS, 
            MarkupHelper.createLabel("Test PASSED: " + testName, ExtentColor.GREEN));
        
        // Log execution time
        long executionTime = result.getEndMillis() - result.getStartMillis();
        ExtentReportManager.getTest().log(Status.INFO, "Execution Time: " + executionTime + " ms");
        
        System.out.println("Test PASSED: " + testName);
        ExtentReportManager.endTest();
    }
    
    @Override
    public void onTestFailure(ITestResult result) {
        String testName = result.getMethod().getMethodName();
        
        ExtentReportManager.getTest().log(Status.FAIL, 
            MarkupHelper.createLabel("Test FAILED: " + testName, ExtentColor.RED));
        
        // Log failure reason
        String failureReason = result.getThrowable().getMessage();
        ExtentReportManager.getTest().log(Status.FAIL, "Failure Reason: " + failureReason);
        
        // Capture screenshot on failure
        try {
            if (BaseSteps.getDriver() != null) {
                String screenshotPath = ScreenshotUtils.captureScreenshot(BaseSteps.getDriver(), testName);
                if (screenshotPath != null) {
                    // Use the relative path returned by ScreenshotUtils
                    ExtentReportManager.getTest().addScreenCaptureFromPath(screenshotPath, "Failure Screenshot");
                    System.out.println("Screenshot captured: " + screenshotPath);
                }
            }
        } catch (Exception e) {
            ExtentReportManager.getTest().log(Status.WARNING, "Could not capture screenshot: " + e.getMessage());
            System.err.println("Screenshot capture failed: " + e.getMessage());
        }
        
        // Log stack trace
        ExtentReportManager.getTest().log(Status.FAIL, result.getThrowable());
        
        System.out.println("Test FAILED: " + testName);
        ExtentReportManager.endTest();
    }
    
    @Override
    public void onTestSkipped(ITestResult result) {
        String testName = result.getMethod().getMethodName();
        
        ExtentReportManager.getTest().log(Status.SKIP, 
            MarkupHelper.createLabel("Test SKIPPED: " + testName, ExtentColor.YELLOW));
        
        if (result.getThrowable() != null) {
            ExtentReportManager.getTest().log(Status.SKIP, result.getThrowable());
        }
        
        System.out.println("Test SKIPPED: " + testName);
        ExtentReportManager.endTest();
    }
    
    @Override
    public void onFinish(ITestContext context) {
        ExtentReportManager.flushReport();
        
        System.out.println("=== Test Suite Completed: " + context.getName() + " ===");
        System.out.println("Total Tests: " + context.getAllTestMethods().length);
        System.out.println("Passed: " + context.getPassedTests().size());
        System.out.println("Failed: " + context.getFailedTests().size());
        System.out.println("Skipped: " + context.getSkippedTests().size());
        
        String reportPath = System.getProperty("user.dir") + "/target/reports/";
        System.out.println("ExtentReport generated at: " + reportPath);
    }
}
