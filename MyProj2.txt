import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.Set;
import java.util.List;

public class ByPage extends BasePage {
    private WebDriverWait wait;
    private Actions actions;
    
    // Page Elements for Buy tab navigation
    @FindBy(xpath = "//a[contains(text(),'Buy') or @title='Buy' or contains(@href,'buy')]")
    private WebElement buyTab;
    
    @FindBy(xpath = "//div[@class='drop-heading' and contains(text(),'Popular Choices')]")
    private WebElement popularChoicesHeading;
    
    @FindBy(xpath = "//div[@class='drop-call']//ul[@class='drop-links']//a[contains(text(),'Ready to Move')]")
    private WebElement readyToMoveLink;
    
    @FindBy(xpath = "//ul[@class='drop-links']//li//a[contains(text(),'Ready to Move') or contains(text(),'Ready To Move')]")
    private WebElement readyToMoveLinkAlt;
    
    // Page Elements for Search functionality
    @FindBy(xpath = "//input[@class='auto-suggest__input topCityLocality' or @placeholder='Enter City, Locality, Project' or @placeholder='Add More']")
    private WebElement searchLocationField;
    
    @FindBy(xpath = "//div[@class='auto-suggest__tag-close']")
    private WebElement removeLocationTag;
    
    @FindBy(xpath = "//div[@class='auto-suggest__drop-down__item']//span[@class='matches']")
    private List<WebElement> locationDropdownOptions;
    
    @FindBy(xpath = "//div[@class='recent-proj-loc__wrap__item']")
    private List<WebElement> topLocalitiesOptions;
    
    @FindBy(xpath = "//div[@class='filter__component__cta-done']")
    private WebElement doneButton;
    
    @FindBy(xpath = "//div[contains(@class,'srpWrap') or contains(@class,'search-results') or contains(@class,'property')]")
    private List<WebElement> searchResults;
    
    @FindBy(xpath = "//div[contains(@class,'property-title') or contains(@class,'prop-title')]")
    private List<WebElement> propertyTitles;
    
    @FindBy(xpath = "//span[contains(@class,'location') or contains(@class,'locality')]")
    private List<WebElement> propertyLocations;
    
    public ByPage(WebDriver driver) {
        super(driver);
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        this.actions = new Actions(driver);
        PageFactory.initElements(driver, this);
    }
    
    // Methods for Ready to Move navigation
    public void navigateToMagicBricks() {
        driver.get("https://www.magicbricks.com");
        wait.until(ExpectedConditions.elementToBeClickable(buyTab));
        
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    public void hoverOnBuyTab() {
        wait.until(ExpectedConditions.visibilityOf(buyTab));
        actions.moveToElement(buyTab).perform();
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    public void waitForPopularChoicesDropdown() {
        try {
            wait.until(ExpectedConditions.visibilityOf(popularChoicesHeading));
        } catch (Exception e) {
            System.out.println("Popular Choices heading not found with primary locator");
            wait.until(ExpectedConditions.presenceOfElementLocated(
                org.openqa.selenium.By.xpath("//div[@class='drop-call']")));
        }
    }
    
    public void clickReadyToMoveLink() {
        WebElement linkToClick = null;
        
        try {
            linkToClick = wait.until(ExpectedConditions.elementToBeClickable(readyToMoveLink));
        } catch (Exception e) {
            try {
                linkToClick = wait.until(ExpectedConditions.elementToBeClickable(readyToMoveLinkAlt));
            } catch (Exception e2) {
                linkToClick = wait.until(ExpectedConditions.elementToBeClickable(
                    org.openqa.selenium.By.xpath("//a[contains(text(),'Ready') and contains(@target,'_blank')]")));
            }
        }
        
        if (linkToClick != null) {
            String originalWindow = driver.getWindowHandle();
            linkToClick.click();
            
            try {
                wait.until(ExpectedConditions.numberOfWindowsToBe(2));
            } catch (Exception e) {
                System.out.println("New tab may not have opened as expected");
            }
        } else {
            throw new RuntimeException("Ready to Move link not found");
        }
    }
    
    public boolean verifyNewTabOpened() {
        try {
            Set<String> windowHandles = driver.getWindowHandles();
            return windowHandles.size() > 1;
        } catch (Exception e) {
            return false;
        }
    }
    
    public void switchToNewTab() {
        Set<String> windowHandles = driver.getWindowHandles();
        for (String windowHandle : windowHandles) {
            if (!windowHandle.equals(driver.getWindowHandle())) {
                driver.switchTo().window(windowHandle);
                break;
            }
        }
    }
    
    // Methods for Search functionality
    public void clearExistingLocationTags() {
        try {
            // Check if there are any existing location tags to remove
            List<WebElement> existingTags = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='auto-suggest__tag-close']"));
            
            for (WebElement tag : existingTags) {
                if (tag.isDisplayed()) {
                    tag.click();
                    System.out.println("Removed existing location tag");
                    Thread.sleep(500);
                }
            }
        } catch (Exception e) {
            System.out.println("No existing location tags to remove or error: " + e.getMessage());
        }
    }
    
    public void enterLocationInSearchField(String location) {
        try {
            // First clear any existing tags
            clearExistingLocationTags();
            
            // Wait for and click the input field
            wait.until(ExpectedConditions.elementToBeClickable(searchLocationField));
            searchLocationField.clear();
            searchLocationField.sendKeys(location);
            
            // Wait for dropdown to appear
            Thread.sleep(1500);
            
            System.out.println("Entered location: " + location);
        } catch (Exception e) {
            throw new RuntimeException("Search field not found: " + e.getMessage());
        }
    }
    
    public void selectLocationFromDropdown(String location) {
        try {
            // Wait for dropdown options to appear - try the new structure first
            wait.until(ExpectedConditions.visibilityOfElementLocated(
                org.openqa.selenium.By.xpath("//div[@class='recent-proj-loc__wrap__item']")));
            
            // Try to find matching location in Top Localities
            for (WebElement option : topLocalitiesOptions) {
                String optionText = option.getText().toLowerCase();
                if (optionText.contains(location.toLowerCase())) {
                    option.click();
                    System.out.println("Selected location from top localities: " + option.getText());
                    return;
                }
            }
            
            // If not found in top localities, try the old dropdown structure
            List<WebElement> oldDropdownOptions = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='auto-suggest__drop-down__item']//span[@class='matches']"));
            
            for (WebElement option : oldDropdownOptions) {
                if (option.getText().toLowerCase().contains(location.toLowerCase())) {
                    option.click();
                    System.out.println("Selected location from dropdown: " + option.getText());
                    return;
                }
            }
            
            // If still not found, click the first available option from top localities
            if (!topLocalitiesOptions.isEmpty()) {
                topLocalitiesOptions.get(0).click();
                System.out.println("Selected first available top locality: " + topLocalitiesOptions.get(0).getText());
            } else {
                throw new RuntimeException("No dropdown options found for: " + location);
            }
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to select location from dropdown: " + e.getMessage());
        }
    }
    
    public void clickDoneButton() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(doneButton));
            doneButton.click();
            System.out.println("Clicked Done button");
            
            // Wait for search results to load
            Thread.sleep(4000);
        } catch (Exception e) {
            throw new RuntimeException("Done button not found or not clickable: " + e.getMessage());
        }
    }
    
    public void performLocationSearch(String location) {
        clearExistingLocationTags();
        enterLocationInSearchField(location);
        selectLocationFromDropdown(location);
        clickDoneButton();
    }
    
    public boolean verifySearchResultsDisplayed() {
        try {
            // Wait for search results to appear
            wait.until(ExpectedConditions.presenceOfElementLocated(
                org.openqa.selenium.By.xpath("//div[contains(@class,'srpWrap') or contains(@class,'search-results') or contains(@class,'property')]")));
            
            // Check if we have search results
            List<WebElement> results = driver.findElements(
                org.openqa.selenium.By.xpath("//div[contains(@class,'property') or contains(@class,'card')]"));
            
            boolean hasResults = results.size() > 0;
            System.out.println("Search results found: " + results.size());
            return hasResults;
        } catch (Exception e) {
            System.out.println("No search results found: " + e.getMessage());
            return false;
        }
    }
    
    public boolean verifyResultsContainSearchedLocation(String searchedLocation) {
        try {
            // Get all property location elements
            List<WebElement> locationElements = driver.findElements(
                org.openqa.selenium.By.xpath("//span[contains(@class,'location') or contains(@class,'locality') or contains(@class,'address')]"));
            
            if (locationElements.isEmpty()) {
                // Try alternative locators for property locations
                locationElements = driver.findElements(
                    org.openqa.selenium.By.xpath("//div[contains(@class,'property')]//text()[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '" + searchedLocation.toLowerCase() + "')]"));
            }
            
            boolean locationFound = false;
            int matchCount = 0;
            
            for (WebElement locationElement : locationElements) {
                String locationText = locationElement.getText().toLowerCase();
                if (locationText.contains(searchedLocation.toLowerCase())) {
                    locationFound = true;
                    matchCount++;
                }
            }
            
            System.out.println("Properties matching location '" + searchedLocation + "': " + matchCount);
            return locationFound;
        } catch (Exception e) {
            System.out.println("Error verifying location in results: " + e.getMessage());
            return false;
        }
    }
    
    public String getCurrentUrl() {
        return driver.getCurrentUrl();
    }
    
    public String getPageTitle() {
        return driver.getTitle();
    }
    
    // Complete test flow for Ready to Move navigation
    public boolean executeReadyToMoveTest() {
        try {
            System.out.println("Step 1: Navigating to MagicBricks...");
            navigateToMagicBricks();
            
            System.out.println("Step 2: Hovering on Buy tab...");
            hoverOnBuyTab();
            
            System.out.println("Step 3: Waiting for Popular Choices dropdown...");
            waitForPopularChoicesDropdown();
            
            System.out.println("Step 4: Clicking Ready to Move link...");
            clickReadyToMoveLink();
            
            System.out.println("Step 5: Verifying new tab opened...");
            boolean newTabOpened = verifyNewTabOpened();
            
            if (newTabOpened) {
                System.out.println("Step 6: Switching to new tab...");
                switchToNewTab();
                System.out.println("Ready to Move navigation test completed successfully!");
                return true;
            } else {
                System.out.println("New tab was not opened as expected");
                return false;
            }
        } catch (Exception e) {
            System.err.println("Ready to Move test execution failed at: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    // Complete test flow for Location Search
    public boolean executeLocationSearchTest(String location) {
        try {
            System.out.println("=== Starting Location Search Test for: " + location + " ===");
            
            System.out.println("Step 1: Performing location search...");
            performLocationSearch(location);
            
            System.out.println("Step 2: Verifying search results are displayed...");
            boolean resultsDisplayed = verifySearchResultsDisplayed();
            
            if (!resultsDisplayed) {
                System.out.println("No search results displayed for location: " + location);
                return false;
            }
            
            System.out.println("Step 3: Verifying results contain searched location...");
            boolean locationMatched = verifyResultsContainSearchedLocation(location);
            
            if (locationMatched) {
                System.out.println("Location search test completed successfully for: " + location);
                return true;
            } else {
                System.out.println("Search results do not contain properties from: " + location);
                return false;
            }
            
        } catch (Exception e) {
            System.err.println("Location search test execution failed for " + location + ": " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    // Debug methods
    public void debugDropdownElements() {
        try {
            hoverOnBuyTab();
            Thread.sleep(2000);
            
            java.util.List<WebElement> dropdownElements = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='drop-call']//a"));
            
            System.out.println("Found " + dropdownElements.size() + " dropdown links:");
            for (int i = 0; i < dropdownElements.size(); i++) {
                WebElement element = dropdownElements.get(i);
                System.out.println((i+1) + ". Text: '" + element.getText() + "' | href: '" + 
                                 element.getAttribute("href") + "'");
            }
        } catch (Exception e) {
            System.err.println("Debug failed: " + e.getMessage());
        }
    }
    
    public void debugSearchElements() {
        try {
            System.out.println("=== Debugging Search Elements ===");
            
            // Check for existing tags
            List<WebElement> existingTags = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='auto-suggest__tag']"));
            System.out.println("Found " + existingTags.size() + " existing location tags:");
            for (int i = 0; i < existingTags.size(); i++) {
                WebElement tag = existingTags.get(i);
                System.out.println((i+1) + ". Tag text: '" + tag.getText() + "'");
            }
            
            // Clear existing tags
            clearExistingLocationTags();
            
            // Try entering a location
            enterLocationInSearchField("Delhi");
            Thread.sleep(2000);
            
            // Check for top localities
            List<WebElement> topLocalities = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='recent-proj-loc__wrap__item']"));
            System.out.println("Found " + topLocalities.size() + " top localities options:");
            for (int i = 0; i < Math.min(5, topLocalities.size()); i++) {
                WebElement option = topLocalities.get(i);
                System.out.println((i+1) + ". Locality: '" + option.getText() + "'");
            }
            
            // Check for done button
            List<WebElement> doneButtons = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='filter__component__cta-done']"));
            System.out.println("Found " + doneButtons.size() + " done buttons");
            
        } catch (Exception e) {
            System.err.println("Search debug failed: " + e.getMessage());
        }
    }
}


--- 

import org.testng.annotations.Test;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.AfterClass;
import org.testng.annotations.DataProvider;
import org.testng.Assert;

public class MainTest {
    
    @BeforeClass
    public void setUpTest() {
        BaseSteps.setUp();
    }

    @AfterClass
    public void tearDownTest() {
        BaseSteps.tearDown();
    }
    
    @Test(priority = 1)
    public void testReadyToMoveNavigation() {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        
        boolean testResult = byPage.executeReadyToMoveTest();
        
        Assert.assertTrue(testResult, "Ready To Move navigation test failed");
        
        String currentUrl = byPage.getCurrentUrl();
        Assert.assertTrue(currentUrl.contains("magicbricks.com"), 
                         "Not navigated to correct domain");
        
        System.out.println("TC_BUY_001: Ready to Move navigation test completed successfully!");
        System.out.println("Current URL: " + currentUrl);
        System.out.println("Page Title: " + byPage.getPageTitle());
        System.out.println("=".repeat(80));
    }
    
    @DataProvider(name = "locationData")
    public Object[][] getLocationData() {
        return new Object[][] {
            {"Mumbai"},
            {"Delhi"},
            {"Bangalore"},
            {"Pune"},
            {"Chennai"}
        };
    }
    
    @Test(priority = 2, dataProvider = "locationData", dependsOnMethods = "testReadyToMoveNavigation")
    public void testSearchPropertiesByLocation(String location) {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        
        // Optional: Debug search elements if needed
        // byPage.debugSearchElements();
        
        boolean searchResult = byPage.executeLocationSearchTest(location);
        
        Assert.assertTrue(searchResult, "Search test failed for location: " + location);
        
        System.out.println("TC_BUY_002: Search properties test completed successfully for: " + location);
        System.out.println("Location: " + location + " - Search Results Verified!");
        System.out.println("Current URL: " + byPage.getCurrentUrl());
        System.out.println("-".repeat(60));
        
        // Add small delay between location searches
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    // Optional: Single location test for debugging
    @Test(enabled = false)
    public void testSingleLocationSearch() {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        
        // First navigate to Ready to Move page
        boolean navResult = byPage.executeReadyToMoveTest();
        Assert.assertTrue(navResult, "Navigation to Ready to Move failed");
        
        // Then test search for one location
        boolean searchResult = byPage.executeLocationSearchTest("Mumbai");
        Assert.assertTrue(searchResult, "Search test failed for Mumbai");
        
        System.out.println("Single location search test completed!");
    }
    
    // Optional: Test with manual location entry (for troubleshooting)
    @Test(enabled = false)
    public void testManualLocationEntry() {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        
        // Navigate to Ready to Move page first
        byPage.executeReadyToMoveTest();
        
        // Manual step-by-step search
        try {
            System.out.println("Manual test - clearing existing tags...");
            byPage.clearExistingLocationTags();
            Thread.sleep(1000);
            
            System.out.println("Manual test - entering location...");
            byPage.enterLocationInSearchField("Pune");
            Thread.sleep(2000);
            
            System.out.println("Manual test - selecting from dropdown...");
            byPage.selectLocationFromDropdown("Pune");
            Thread.sleep(1000);
            
            System.out.println("Manual test - clicking done...");
            byPage.clickDoneButton();
            
            System.out.println("Manual test - verifying results...");
            boolean results = byPage.verifySearchResultsDisplayed();
            System.out.println("Results displayed: " + results);
            
        } catch (Exception e) {
            System.err.println("Manual test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    // Optional debug tests
    @Test(enabled = false)
    public void debugReadyToMoveDropdown() {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        byPage.navigateToMagicBricks();
        byPage.debugDropdownElements();
    }
    
    @Test(enabled = false)
    public void debugSearchPage() {
        ByPage byPage = new ByPage(BaseSteps.getDriver());
        // First navigate to Ready to Move page
        byPage.executeReadyToMoveTest();
        // Then debug search elements
        byPage.debugSearchElements();
    }
}
