public class BaseSteps {
    protected static WebDriver driver;

    @BeforeClass
    public static void setUp() {
        driver = initializeDriver();
    }

    @AfterClass
    public static void tearDown() {
        closeDriver();
    }

    public static WebDriver initializeDriver() {
        String browserName = System.getProperty("browser", "chrome");

        switch (browserName.toLowerCase()) {
            case "chrome":
                WebDriverManager.chromedriver().setup();
                driver = new ChromeDriver();
                break;
            case "firefox":
                WebDriverManager.firefoxdriver().setup();
                driver = new FirefoxDriver();
                break;
            case "edge":
                WebDriverManager.edgedriver().setup();
                driver = new EdgeDriver();
                break;
            default:
                throw new IllegalArgumentException("Browser not supported: " + browserName);
        }

        driver.manage().window().maximize();
        driver.manage().deleteAllCookies();
        return driver;
    }

    public static void closeDriver() {
        if (driver != null) {
            driver.quit();
            driver = null;
        }
    }

    public static WebDriver getDriver() {
        return driver;
    }
}


---

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;

public abstract class BasePage {
    protected WebDriver driver;
    
    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }
    
    // This class can only be extended by ByPage.java
    // Protected constructor ensures controlled inheritance
    protected BasePage() {
        // Default constructor for inheritance
    }
}

----

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.Set;

public class ByPage extends BasePage {
    private WebDriverWait wait;
    private Actions actions;
    
    // Updated Page Elements based on actual HTML structure
    @FindBy(xpath = "//a[contains(text(),'Buy') or @title='Buy' or contains(@href,'buy')]")
    private WebElement buyTab;
    
    @FindBy(xpath = "//div[@class='drop-heading' and contains(text(),'Popular Choices')]")
    private WebElement popularChoicesHeading;
    
    @FindBy(xpath = "//div[@class='drop-call']//ul[@class='drop-links']//a[contains(text(),'Ready to Move')]")
    private WebElement readyToMoveLink;
    
    // Alternative locator in case the above doesn't work
    @FindBy(xpath = "//ul[@class='drop-links']//li//a[contains(text(),'Ready to Move') or contains(text(),'Ready To Move')]")
    private WebElement readyToMoveLinkAlt;
    
    public ByPage(WebDriver driver) {
        super(driver);
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        this.actions = new Actions(driver);
        PageFactory.initElements(driver, this);
    }
    
    public void navigateToMagicBricks() {
        driver.get("https://www.magicbricks.com");
        // Wait for page to load completely
        wait.until(ExpectedConditions.elementToBeClickable(buyTab));
        
        // Add a small delay to ensure page is fully loaded
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    public void hoverOnBuyTab() {
        wait.until(ExpectedConditions.visibilityOf(buyTab));
        actions.moveToElement(buyTab).perform();
        
        // Add delay to allow dropdown to appear
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    public void waitForPopularChoicesDropdown() {
        try {
            wait.until(ExpectedConditions.visibilityOf(popularChoicesHeading));
        } catch (Exception e) {
            System.out.println("Popular Choices heading not found with primary locator");
            // Try alternative approach - wait for any dropdown to be visible
            wait.until(ExpectedConditions.presenceOfElementLocated(
                org.openqa.selenium.By.xpath("//div[@class='drop-call']")));
        }
    }
    
    public void clickReadyToMoveLink() {
        WebElement linkToClick = null;
        
        try {
            // Try primary locator first
            linkToClick = wait.until(ExpectedConditions.elementToBeClickable(readyToMoveLink));
        } catch (Exception e) {
            try {
                // Try alternative locator
                linkToClick = wait.until(ExpectedConditions.elementToBeClickable(readyToMoveLinkAlt));
            } catch (Exception e2) {
                // Try a more generic approach
                linkToClick = wait.until(ExpectedConditions.elementToBeClickable(
                    org.openqa.selenium.By.xpath("//a[contains(text(),'Ready') and contains(@target,'_blank')]")));
            }
        }
        
        if (linkToClick != null) {
            // Store current window handle
            String originalWindow = driver.getWindowHandle();
            
            // Click the Ready To Move link
            linkToClick.click();
            
            // Wait for new tab to open
            try {
                wait.until(ExpectedConditions.numberOfWindowsToBe(2));
            } catch (Exception e) {
                System.out.println("New tab may not have opened as expected");
            }
        } else {
            throw new RuntimeException("Ready to Move link not found");
        }
    }
    
    public boolean verifyNewTabOpened() {
        try {
            Set<String> windowHandles = driver.getWindowHandles();
            return windowHandles.size() > 1;
        } catch (Exception e) {
            return false;
        }
    }
    
    public void switchToNewTab() {
        Set<String> windowHandles = driver.getWindowHandles();
        for (String windowHandle : windowHandles) {
            if (!windowHandle.equals(driver.getWindowHandle())) {
                driver.switchTo().window(windowHandle);
                break;
            }
        }
    }
    
    public String getCurrentUrl() {
        return driver.getCurrentUrl();
    }
    
    public String getPageTitle() {
        return driver.getTitle();
    }
    
    // Enhanced test flow method with better error handling
    public boolean executeReadyToMoveTest() {
        try {
            System.out.println("Step 1: Navigating to MagicBricks...");
            navigateToMagicBricks();
            
            System.out.println("Step 2: Hovering on Buy tab...");
            hoverOnBuyTab();
            
            System.out.println("Step 3: Waiting for Popular Choices dropdown...");
            waitForPopularChoicesDropdown();
            
            System.out.println("Step 4: Clicking Ready to Move link...");
            clickReadyToMoveLink();
            
            System.out.println("Step 5: Verifying new tab opened...");
            boolean newTabOpened = verifyNewTabOpened();
            
            if (newTabOpened) {
                System.out.println("Step 6: Switching to new tab...");
                switchToNewTab();
                System.out.println("Test completed successfully!");
                return true;
            } else {
                System.out.println("New tab was not opened as expected");
                return false;
            }
        } catch (Exception e) {
            System.err.println("Test execution failed at: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    // Debug method to help troubleshoot
    public void debugDropdownElements() {
        try {
            hoverOnBuyTab();
            Thread.sleep(2000);
            
            // Find all dropdown elements for debugging
            java.util.List<WebElement> dropdownElements = driver.findElements(
                org.openqa.selenium.By.xpath("//div[@class='drop-call']//a"));
            
            System.out.println("Found " + dropdownElements.size() + " dropdown links:");
            for (int i = 0; i < dropdownElements.size(); i++) {
                WebElement element = dropdownElements.get(i);
                System.out.println((i+1) + ". Text: '" + element.getText() + "' | href: '" + 
                                 element.getAttribute("href") + "'");
            }
        } catch (Exception e) {
            System.err.println("Debug failed: " + e.getMessage());
        }
    }
}

----



import org.testng.annotations.Test;
import org.testng.Assert;

public class MainTest extends BaseSteps {
    
    @Test
    public void testReadyToMoveNavigation() {
        // Initialize the page object
        ByPage byPage = new ByPage(getDriver());
        
        // Execute the complete test flow
        boolean testResult = byPage.executeReadyToMoveTest();
        
        // Verify the test execution was successful
        Assert.assertTrue(testResult, "Ready To Move navigation test failed");
        
        // Additional verification - check if we're on the correct page
        String currentUrl = byPage.getCurrentUrl();
        Assert.assertTrue(currentUrl.contains("magicbricks.com"), 
                         "Not navigated to correct domain");
        
        System.out.println("Test completed successfully!");
        System.out.println("Current URL: " + currentUrl);
        System.out.println("Page Title: " + byPage.getPageTitle());
    }
}
