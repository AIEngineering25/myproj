import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;

public abstract class BasePage {
    protected WebDriver driver;
    
    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }
    
    // This class can only be extended by ByPage.java
    // Protected constructor ensures controlled inheritance
    protected BasePage() {
        // Default constructor for inheritance
    }
}

----

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.Set;

public class ByPage extends BasePage {
    private WebDriverWait wait;
    private Actions actions;
    
    // Page Elements using PageFactory
    @FindBy(xpath = "//a[contains(text(),'Buy') or @title='Buy']")
    private WebElement buyTab;
    
    @FindBy(xpath = "//span[contains(text(),'Popular Choices')]")
    private WebElement popularChoicesHeading;
    
    @FindBy(xpath = "//a[contains(text(),'Ready To Move')]")
    private WebElement readyToMoveLink;
    
    public ByPage(WebDriver driver) {
        super(driver);
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        this.actions = new Actions(driver);
        PageFactory.initElements(driver, this);
    }
    
    public void navigateToMagicBricks() {
        driver.get("https://www.magicbricks.com");
        wait.until(ExpectedConditions.elementToBeClickable(buyTab));
    }
    
    public void hoverOnBuyTab() {
        wait.until(ExpectedConditions.visibilityOf(buyTab));
        actions.moveToElement(buyTab).perform();
    }
    
    public void waitForPopularChoicesDropdown() {
        wait.until(ExpectedConditions.visibilityOf(popularChoicesHeading));
    }
    
    public void clickReadyToMoveLink() {
        wait.until(ExpectedConditions.elementToBeClickable(readyToMoveLink));
        
        // Store current window handle
        String originalWindow = driver.getWindowHandle();
        
        // Click the Ready To Move link
        readyToMoveLink.click();
        
        // Wait for new tab to open
        wait.until(ExpectedConditions.numberOfWindowsToBe(2));
    }
    
    public boolean verifyNewTabOpened() {
        Set<String> windowHandles = driver.getWindowHandles();
        return windowHandles.size() > 1;
    }
    
    public void switchToNewTab() {
        Set<String> windowHandles = driver.getWindowHandles();
        for (String windowHandle : windowHandles) {
            if (!windowHandle.equals(driver.getWindowHandle())) {
                driver.switchTo().window(windowHandle);
                break;
            }
        }
    }
    
    public String getCurrentUrl() {
        return driver.getCurrentUrl();
    }
    
    public String getPageTitle() {
        return driver.getTitle();
    }
    
    // Complete test flow method
    public boolean executeReadyToMoveTest() {
        try {
            navigateToMagicBricks();
            hoverOnBuyTab();
            waitForPopularChoicesDropdown();
            clickReadyToMoveLink();
            
            if (verifyNewTabOpened()) {
                switchToNewTab();
                return true;
            }
            return false;
        } catch (Exception e) {
            System.err.println("Test execution failed: " + e.getMessage());
            return false;
        }
    }
}


----



import org.testng.annotations.Test;
import org.testng.Assert;

public class MainTest extends BaseSteps {
    
    @Test
    public void testReadyToMoveNavigation() {
        // Initialize the page object
        ByPage byPage = new ByPage(getDriver());
        
        // Execute the complete test flow
        boolean testResult = byPage.executeReadyToMoveTest();
        
        // Verify the test execution was successful
        Assert.assertTrue(testResult, "Ready To Move navigation test failed");
        
        // Additional verification - check if we're on the correct page
        String currentUrl = byPage.getCurrentUrl();
        Assert.assertTrue(currentUrl.contains("magicbricks.com"), 
                         "Not navigated to correct domain");
        
        System.out.println("Test completed successfully!");
        System.out.println("Current URL: " + currentUrl);
        System.out.println("Page Title: " + byPage.getPageTitle());
    }
}
